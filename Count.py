import numpy as np
import supervision as sv
import streamlit as st
import tempfile
import torch
from ultralytics import YOLO
import  cv2
import numpy as np
def app():
    count1=0
    count2=0
    model = YOLO('yolov8s.pt')
    #model = torch.hub.load('ultralytics/yolov8', 'yolov8m')
    bg_video = st.file_uploader("Upload video:", type=["mp4", "jpg"])
    if bg_video is not None:
        tfile = tempfile.NamedTemporaryFile(delete=False) 
        tfile.write(bg_video.read())
        colors = sv.ColorPalette.default()
        polygons = [
            np.array([
                [431.999, 32.0], [432.0, 32.0], [432.5, 32.0], [433.0, 32.0], [434.5, 32.0], [436.0, 32.0], [438.5, 32.0], [441.0, 32.0], [443.0, 31.5], [445.0, 31.0], [446.5, 31.0], [448.0, 31.0], [448.5, 31.0], [449.0, 31.0], [450.0, 31.0], [451.0, 31.0], [451.5, 31.0], [452.0, 31.0], [452.5, 31.0], [453.0, 31.0], [454.0, 31.0], [455.0, 31.0], [455.5, 31.0], [456.0, 31.0], [457.5, 31.0], [459.0, 31.0], [461.0, 31.0], [463.0, 31.0], 
                [465.0, 31.5], [467.0, 32.0], [469.0, 32.0], [471.0, 32.0], [471.5, 32.0], [472.0, 32.0], [472.5, 32.0], [473.0, 32.0], [473.0, 32.5], [473.0, 33.0], [474.0, 34.0], [475.0, 35.0], [475.5, 36.0], [476.0, 37.0], [476.5, 39.0], [477.0, 41.0], [478.0, 43.0], [479.0, 45.0], [479.5, 47.0], [480.0, 49.0], [480.5, 51.0], [481.0, 53.0], [481.0, 56.0], [481.0, 59.0], [481.0, 61.5], [481.0, 64.0], [481.0, 66.0], [481.0, 68.0], [482.0, 70.5], [483.0, 73.0], [483.0, 75.0], [483.0, 77.0], [483.0, 79.0], [483.0, 81.0], [483.5, 82.5], [484.0, 84.0], [484.0, 85.5], [484.0, 87.0], [484.0, 88.0], [484.0, 89.0], [484.5, 90.5], [485.0, 92.0], [485.0, 94.0], [485.0, 96.0], [486.0, 98.5], [487.0, 101.0], [487.5, 104.5], [488.0, 108.0], [488.5, 112.0], [489.0, 116.0], 
                [490.5, 120.5], [492.0, 125.0], [493.5, 130.5], [495.0, 136.0], [497.0, 142.0], [499.0, 148.0], [500.0, 154.0], [501.0, 160.0], [502.0, 165.5], [503.0, 171.0], [504.0, 175.0], [505.0, 179.0], [505.0, 183.0], [505.0, 187.0], [505.0, 190.0], [505.0, 193.0], [505.0, 195.0], [505.0, 197.0], [505.0, 198.5], [505.0, 200.0], [505.0, 200.5], [505.0, 201.0], [505.0, 202.5], [505.0, 204.0], [505.0, 208.0], [505.0, 212.0], [506.0, 218.5], [507.0, 225.0], [508.0, 234.0], [509.0, 243.0], [509.0, 253.5], [509.0, 264.0], [510.0, 276.5], [511.0, 289.0], [511.5, 298.5], [512.0, 308.0], [512.0, 316.5], [512.0, 325.0], [512.0, 333.0], [512.0, 341.0], [512.0, 346.5], [512.0, 352.0], [512.0, 354.0], [512.0, 356.0], [512.0, 357.5], [512.0, 359.0], [512.0, 359.5], [512.0, 360.0], [512.5, 362.0], [513.0, 364.0], [514.0, 368.0], [515.0, 372.0], [517.0, 378.0], [519.0, 384.0], [521.0, 391.5], [523.0, 399.0], [525.0, 405.5], [527.0, 412.0], [528.0, 418.5], [529.0, 425.0], [530.5, 432.0], [532.0, 439.0], [533.5, 445.5], [535.0, 452.0], [536.0, 457.5], [537.0, 463.0], [538.5, 466.0], [540.0, 469.0], [540.0, 470.5], [540.0, 472.0], [540.0, 472.5], [540.0, 473.0], [540.0, 474.0], [540.0, 475.0], [540.0, 477.5], [540.0, 480.0], [540.0, 484.0], [540.0, 488.0], [540.0, 491.5], [540.0, 495.0], [540.0, 499.5], [540.0, 504.0], [539.5, 507.5], [539.0, 511.0], [538.0, 513.5], [537.0, 516.0], [536.0, 517.5], [535.0, 519.0], [533.0, 519.5], [531.0, 520.0], [530.0, 520.5], [529.0, 521.0], [528.0, 521.0], [527.0, 521.0], [526.0, 522.0], [525.0, 523.0], [524.0, 523.0], [523.0, 523.0], [522.0, 523.0], [521.0, 523.0], [520.0, 523.0], [519.0, 523.0], [517.5, 523.0], [516.0, 523.0], [514.5, 523.5], [513.0, 524.0], [512.0, 524.0], [511.0, 524.0], [509.0, 524.0], [507.0, 524.0], [505.0, 524.0], [503.0, 524.0], [500.0, 524.5], [497.0, 525.0], [495.0, 525.0], [493.0, 525.0], [491.0, 525.0], [489.0, 525.0], [488.0, 525.0], [487.0, 525.0], [485.5, 525.0], [484.0, 525.0], [482.5, 525.0], [481.0, 525.0], [480.5, 525.0], [480.0, 525.0], [479.5, 525.0], [479.0, 525.0], [478.0, 525.0], [477.0, 525.0], [477.0, 524.5], [477.0, 524.0], [477.0, 523.5], [477.0, 523.0], [476.5, 521.5], [476.0, 520.0], [475.5, 518.0], [475.0, 516.0], [475.0, 513.5], [475.0, 511.0], [475.0, 507.5], [475.0, 504.0], [474.0, 500.5], [473.0, 497.0], [473.0, 493.0], [473.0, 489.0], [473.0, 485.0], [473.0, 481.0], [473.0, 478.0], [473.0, 475.0], [472.5, 471.5], [472.0, 468.0], [472.0, 464.5], [472.0, 461.0], [472.0, 458.0], [472.0, 455.0], [472.0, 451.5], [472.0, 448.0], [471.5, 444.5], [471.0, 441.0], [471.0, 438.0], [471.0, 435.0], [470.0, 432.0], [469.0, 429.0], [469.0, 427.0], [469.0, 425.0], [468.5, 424.0], [468.0, 423.0], [468.0, 422.0], [468.0, 421.0], [467.5, 416.0], [467.0, 411.0], [465.0, 398.0], [463.0, 385.0], [459.5, 367.0], [456.0, 349.0], [453.5, 332.5], [451.0, 316.0], [449.0, 302.5], [447.0, 289.0], [445.5, 277.0], [444.0, 265.0], [442.5, 256.5], [441.0, 248.0], [440.5, 242.0], [440.0, 236.0], [439.5, 232.5], [439.0, 229.0], [439.0, 228.5], [439.0, 228.0], [439.0, 226.5], [439.0, 225.0], [439.0, 223.0], [439.0, 221.0], [439.0, 215.0], [439.0, 209.0], [439.0, 201.0], [439.0, 193.0], [439.0, 185.0], [439.0, 177.0], [439.0, 168.5], [439.0, 160.0], [439.0, 153.5], [439.0, 147.0], [439.0, 142.0], [439.0, 137.0], [439.0, 134.0], [439.0, 131.0], [439.0, 129.0], [439.0, 127.0], [439.0, 126.0], [439.0, 125.0], [439.0, 124.0], [439.0, 123.0], [438.0, 119.5], [437.0, 116.0], [436.5, 112.0], [436.0, 108.0], [435.5, 104.0], [435.0, 100.0], [434.0, 96.5], [433.0, 93.0], [432.5, 89.0], [432.0, 85.0], [432.0, 82.0], [432.0, 79.0], [431.5, 77.0], [431.0, 75.0], [431.0, 73.5], [431.0, 72.0], [431.0, 70.5], [431.0, 69.0], [431.0, 68.5], [431.0, 68.0], [431.0, 67.5], [431.0, 67.0], [431.0, 66.0], [431.0, 65.0], [431.0, 64.5], [431.0, 64.0], [430.0, 62.5], [429.0, 61.0], [429.0, 60.5], [429.0, 60.0], [429.0, 59.5], [429.0, 59.0], [429.0, 58.0], [429.0, 57.0], [429.0, 56.5], [429.0, 56.0], [428.5, 54.5], [428.0, 53.0], [428.0, 52.0], [428.0, 51.0], [428.0, 49.5], [428.0, 48.0], [428.0, 47.5], [428.0, 47.0], [428.0, 45.5], [428.0, 44.0], [428.0, 43.5], [428.0, 43.0], [427.5, 42.0], [427.0, 41.0], [427.0, 40.0], [427.0, 39.0], [427.0, 38.0], [427.0, 37.0], [427.0, 36.5], [427.0, 36.0], [427.0, 35.5], [427.0, 35.0], [427.0, 34.0], [427.0, 33.0], [427.0, 32.5], 
                [427.0, 32.0], [427.5, 32.0], [428.0, 32.0], 
                [428.5, 32.0], [429.0, 32.0], [430.0, 32.0], [431.0, 32.0],
                [431.5, 32.0], [432.001, 32.0]]
            , np.int32)
            
        ]
        
        video_info = sv.VideoInfo.from_video_path(tfile.name)
        video_info.height=640
        video_info.width=640
        zones = [
            sv.PolygonZone(
                polygon=polygon, 
                frame_resolution_wh=video_info.resolution_wh
            )
            for polygon
            in polygons
        ]
        zone_annotators = [
            sv.PolygonZoneAnnotator(
                zone=zone, 
                color=colors.by_idx(index), 
                thickness=4,
                text_thickness=8,
                text_scale=4
            )
            for index, zone
            in enumerate(zones)
        ]
        box_annotators = [
            sv.BoxAnnotator(
                color=colors.by_idx(index), 
                thickness=4, 
                text_thickness=4, 
                text_scale=2
                )
            for index
            in range(len(polygons))
        ]
        
        # extract video frame
        generator = sv.get_video_frames_generator(tfile.name)  
        
        def process_frame(frame: np.ndarray, _) -> np.ndarray:
            iterator = iter(generator)
            frame = next(iterator)
            #frame.resize((640,640),refcheck=False)
            # detect
            results = model(frame, imgsz=(640,640))[0]
            detections = sv.Detections.from_yolov8(results)
            detections = detections[(detections.class_id == 0) & (detections.confidence > 0.5)]
            
            
            for zone, zone_annotator, box_annotator in zip(zones, zone_annotators, box_annotators):
                mask = zone.trigger(detections=detections)
                print("zone count",zones.count)
                
                if mask is not None:
                  print("current zone: ",zone.current_count)
               
                print(zone.current_count)
                detections_filtered = detections[mask]
                
                count2=len(detections_filtered)
                frame = box_annotator.annotate(scene=frame, detections=detections_filtered)
                frame = zone_annotator.annotate(scene=frame)
            return frame

       
        #sv.show_frame_in_notebook(frame, (16, 16))
        sv.process_video(source_path=tfile.name, target_path=f"/Users/khawlahd/Desktop/cv/my-venv/count-result.mp4", callback=process_frame)
        print(count1)
        print(count2)

        
        st.text_area(label ='The total of missed Items=',value=count1, height =100)